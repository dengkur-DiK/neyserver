 import { pgTable, text, serial, timestamp, date } from "drizzle-orm/pg-core";
import { createInsertSchema, createSelectSchema } from "drizzle-zod";
import { z } from "zod";

// Existing schemas (no changes here)
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
});

// ADDED: Messages table for contact form submissions
export const messages = pgTable("messages", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull(),
  message: text("message").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const contacts = pgTable("contacts", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull(),
  message: text("message").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const bookings = pgTable("bookings", {
  id: serial("id").primaryKey(),
  firstName: text("first_name").notNull(),
  lastName: text("last_name").notNull(),
  email: text("email").notNull(),
  phone: text("phone").notNull(),
  service: text("service").notNull(),
  bookingDate: text("booking_date", { mode: 'string' }).notNull(),
  bookingTime: text("booking_time").notNull(),
  message: text("message").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Your existing portfolioItems Drizzle schema - using this as the source of truth
export const portfolioItems = pgTable("portfolio_items", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  description: text("description").notNull(),
  image: text("image").notNull(),
  category: text("category").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Existing Zod schemas (no changes here)
export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
});

export const insertContactSchema = createInsertSchema(contacts).omit({
  id: true,
  createdAt: true,
});

// ADDED: Zod schema for inserting messages
export const insertMessageSchema = createInsertSchema(messages).omit({
  id: true,
  createdAt: true,
});

export const insertBookingSchema = createInsertSchema(bookings).omit({
  id: true,
  createdAt: true,
});

// MODIFIED: insertPortfolioItemSchema with more robust validation
// This schema ensures required fields are present and valid for NEW items.
export const insertPortfolioItemSchema = createInsertSchema(portfolioItems, {
  title: z.string().min(1, "Title is required"),
  description: z.string().min(1, "Description is required"),
  image: z.string().url("Image must be a valid URL").min(1, "Image URL is required"),
  category: z.string().min(1, "Category is required"),
}).omit({
  id: true, // ID is auto-generated by the database
  createdAt: true, // createdAt is auto-generated by the database
});

// NEW: updatePortfolioItemSchema for partial updates
// This schema allows you to update only specific fields of a portfolio item.
// All fields are optional in the *payload* for update, but if provided, they must be valid.
export const updatePortfolioItemSchema = z.object({
  // ID is *not* part of the .partial() but is used to identify the record to update.
  // It will be parsed separately from req.params.
  title: z.string().min(1, "Title must not be empty").optional(),
  description: z.string().min(1, "Description must not be empty").optional(),
  image: z.string().url("Image must be a valid URL").min(1, "Image URL must not be empty").optional(),
  category: z.string().min(1, "Category must not be empty").optional(),
});


// Existing Type Inferences (no changes here)
export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;
export type Contact = typeof contacts.$inferSelect;
export type InsertContact = z.infer<typeof insertContactSchema>;
// ADDED: Type for a message from the messages table
export type Message = typeof messages.$inferSelect;
// ADDED: Type for inserting a new message
export type InsertMessage = z.infer<typeof insertMessageSchema>;
export type Booking = typeof bookings.$inferSelect;
export type InsertBooking = z.infer<typeof insertBookingSchema>;
export type PortfolioItem = typeof portfolioItems.$inferSelect;
export type InsertPortfolioItem = z.infer<typeof insertPortfolioItemSchema>;
// NEW: Type for updating portfolio items (derived from the Zod schema)
export type UpdatePortfolioItem = z.infer<typeof updatePortfolioItemSchema>;